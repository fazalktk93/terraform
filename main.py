from flask import Flask, request, jsonify
import os
import subprocess
import uuid
import shutil

app = Flask(__name__)

# Load environment variables
AGENT_KEY = os.environ.get("AGENT_KEY")
DO_TOKEN = os.environ.get("DO_TOKEN")

@app.route('/')
def index():
    return '''
    <html>
    <head>
        <title>TerraformGen Manual Deployment</title>
    </head>
    <body>
        <h2>TerraformGen Chatbot</h2>

        <!-- Chatbot Widget -->
        <script async
        src="https://sofmaucktvjaphia4c424wki.agents.do-ai.run/static/chatbot/widget.js"
        data-agent-id="c9344a89-6be3-11f0-bf8f-4e013e2ddde4"
        data-chatbot-id="pzXfg1TbVl2Toyr_B2FPnMAtMgHaZZZZ"
        data-name="agent-07282025 Chatbot"
        data-primary-color="#031B4E"
        data-secondary-color="#E5E8ED"
        data-button-background-color="#0061EB"
        data-starting-message="Hello! How can I help you today?"
        data-logo="/static/chatbot/icons/default-agent.svg">
        </script>

        <!-- Deploy Form -->
        <div style="margin-top: 40px;">
        <h3>Deploy Terraform Code</h3>
        <p>Paste the Terraform code generated by the bot below and click ‚ÄúDeploy‚Äù.</p>
        <form method="POST" action="/trigger-deploy">
            <textarea name="tf_code" rows="20" cols="100" placeholder="Paste your Terraform code here..."></textarea><br><br>
            <button type="submit">üöÄ Deploy</button>
        </form>
        </div>
    </body>
    </html>
    '''

@app.route('/trigger-deploy', methods=['POST'])
def trigger_deploy():
    tf_code = request.form['tf_code']

    headers = {
        "Authorization": f"Bearer {AGENT_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "terraform_code": tf_code
    }

    try:
        # Send to local /deploy endpoint
        response = requests.post("http://localhost:5000/deploy", headers=headers, json=payload)
        result = response.json()
        return render_template_string('''
            <html>
            <body>
                <h3>Deployment Result</h3>
                <pre>{{ result }}</pre>
                <br><a href="/">Back to Home</a>
            </body>
            </html>
        ''', result=result)
    except Exception as e:
        return f"Deployment failed: {str(e)}"

@app.route('/deploy', methods=['POST'])
def deploy():
    # 1. Validate Authorization Header
    auth_header = request.headers.get("Authorization")
    if not auth_header or auth_header != f"Bearer {AGENT_KEY}":
        return jsonify({"error": "Unauthorized"}), 401

    # 2. Validate Request Body
    data = request.get_json()
    if not data or "terraform_code" not in data:
        return jsonify({"error": "Missing 'terraform_code' in request"}), 400

    tf_code = data["terraform_code"]

    # 3. Create Unique Working Directory
    deploy_id = str(uuid.uuid4())
    deploy_dir = os.path.join("/tmp", deploy_id)
    os.makedirs(deploy_dir)

    try:
        os.chdir(deploy_dir)

        # 4. Write Terraform Code
        with open("main.tf", "w") as f:
            f.write(tf_code)

        # 5. Inject token via tfvars
        with open("terraform.tfvars", "w") as f:
            f.write(f'do_token = "{DO_TOKEN}"\n')

        # 6. Inject provider block if not present
        if "provider" not in tf_code:
            with open("provider.tf", "w") as f:
                f.write("""
variable "do_token" {}

provider "digitalocean" {
  token = var.do_token
}
""")

        # 7. Run Terraform
        subprocess.run(["terraform", "init", "-no-color"], check=True)
        subprocess.run([
            "terraform", "apply",
            "-var-file=terraform.tfvars",
            "-auto-approve",
            "-no-color"
        ], check=True)

        return jsonify({
            "message": "‚úÖ Terraform applied successfully!"
        }), 200

    except subprocess.CalledProcessError as e:
        return jsonify({
            "error": "Terraform failed",
            "details": str(e)
        }), 500

    except Exception as e:
        return jsonify({
            "error": "Server error",
            "details": str(e)
        }), 500

    finally:
        # 8. Clean up
        try:
            os.chdir("/app")
            shutil.rmtree(deploy_dir, ignore_errors=True)
        except Exception:
            pass

if __name__ == "__main__":
    app.run()
